{% extends 'base.html.twig' %}

{% block body %}
	<div>
		<input id="color-value" onchange="setColor($('#color-value').val())" hidden="true" value="#000000">
		<canvas id="color-preview" height="50px" width="50px"></canvas>
		<button id="color-picker" class="jscolor" data-jscolor="{valueElement: 'color-value', styleElement: 'color-preview', closable: true, hash: true}">Choose Color</button>
	</div>
    <canvas id="canvas" width="1000px" height="500px" style="background: #CCCCCC;">
        Browser does not support canvas.
    </canvas>
    <div><p>Room Id: {{ room.id }}</p></div>
    <div><p>Username: {{ app.user.username }}</p></div>
    <div><p>JWT: {{ jwt }}</p></div>
{% endblock %}

{% block javascripts %}
    {% javascripts '@AppBundle/Resources/public/javascript/jquery-2.1.4.min.js'
                   '@AppBundle/Resources/public/javascript/jscolor.min.js'  %}
    	<script src="{{ asset_url }}"></script>
    {% endjavascripts  %}
    <script>
        var lastX,
            lastY;
        var leftMouseDown = false,
            rightMouseDown = false;
        var LEFT_MOUSE = 0,
            MIDDLE_MOUSE = 1,
            RIGHT_MOUSE = 2;

        var ctx = $('#canvas')[0].getContext('2d');
        ctx.lineWidth = 4;
        var color = '#000000';
        
        var conn = new WebSocket('ws://localhost:3000');

        conn.onopen = function(e) {
            conn.send(JSON.stringify({
                type : 'authenticate',
                jwt : '{{ jwt }}'
            }));
        }
        
        conn.onmessage = function(e) {
            var mseg = JSON.parse(e.data);

            if (mseg.type == 'stroke') {
                ctx.beginPath();
                ctx.moveTo(mseg.x1, mseg.y1);
                ctx.lineTo(mseg.x2, mseg.y2);
                ctx.strokeStyle = mseg.color;
                ctx.stroke();
            }
        }

        function handleStart(evt) {
            evt.preventDefault();
            
            switch (evt.button) {
            case LEFT_MOUSE:
                leftMouseDown = true;
                break;
            case RIGHT_MOUSE:
                rightMouseDown = true;
                break;
            }

            if (leftMouseDown) {
                ctx.beginPath();
                // a circle at the start
                ctx.arc(evt.offsetX, evt.offsetY, 4, 0, 2 * Math.PI, false);
                ctx.fillStyle = color;
                ctx.fill();
            }

            lastX = evt.offsetX;
            lastY = evt.offsetY;
        }

        function handleMove(evt) {
            if (leftMouseDown) {
                evt.preventDefault();
                
                ctx.beginPath();
                ctx.moveTo(lastX, lastY);
                ctx.lineTo(evt.offsetX, evt.offsetY);
                ctx.strokeStyle = color;
                ctx.stroke();

                conn.send(JSON.stringify({
                    type : 'stroke',
                    x1 : lastX,
                    y1 : lastY,
                    x2 : evt.offsetX,
                    y2 : evt.offsetY
                }));
                
                lastX = evt.offsetX;
                lastY = evt.offsetY;
            }
        }

        function handleEnd(evt) {
            evt.preventDefault();
            
            if (leftMouseDown) {
                ctx.beginPath();
                ctx.moveTo(lastX, lastY);
                ctx.lineTo(evt.offsetX, evt.offsetY);
                // and a square at the end
                ctx.fillStyle = color;
                ctx.fillRect(evt.offsetX - 4, evt.offsetY - 4, 8, 8);
            }
            
            switch (evt.button) {
            case LEFT_MOUSE:
                leftMouseDown = false;
                break;
            case RIGHT_MOUSE:
                rightMouseDown = false;
                break;
            }
        }

        function setColor(col) {
            color = col;
            conn.send(JSON.stringify({
                type : 'set color',
                color : col
            }));
        }

        var el = $("#canvas");
        el.mousedown(handleStart);
        el.mouseup(handleEnd);
        el.mousemove(handleMove);
        console.log("Added Event Listeners");
    </script>
{% endblock %}
