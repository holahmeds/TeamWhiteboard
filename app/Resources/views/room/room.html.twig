{% extends 'base.html.twig' %}

{% block body %}
	<div>
		<input id="color-value" hidden="true" value="#000000">
		<button id="color-picker" hidden="true" class="jscolor" data-jscolor="{valueElement: 'color-value', styleElement: 'color-preview', closable: true, hash: true}">Choose Color</button>
		
		<canvas id="color-preview" height="50px" width="50px"></canvas>
		<input type="file" id="image-upload-button">
	</div>
	<div id="editable" style="position: relative">
	    <canvas id="canvas" width="1300px" height="600px" style="background: #CCCCCC;">
	        Browser does not support canvas.
	    </canvas>
	</div>
{% endblock %}

{% block javascripts %}
    {% javascripts '@AppBundle/Resources/public/javascript/jquery-2.1.4.min.js'
                   '@AppBundle/Resources/public/javascript/jscolor.min.js'  %}
    	<script src="{{ asset_url }}"></script>
    {% endjavascripts  %}
    <script>
        var lastX,
            lastY,
            imageLastX,
            imageLastY;
        var leftMouseDown = false,
            rightMouseDown = false;
        var LEFT_MOUSE = 0,
            MIDDLE_MOUSE = 1,
            RIGHT_MOUSE = 2;

        var canvas = $('#canvas');
        var ctx = canvas[0].getContext('2d');
        ctx.lineWidth = 4;
        
        var conn = new WebSocket('ws://localhost:3000');

        conn.onopen = function(e) {
            conn.send(JSON.stringify({
                type : 'authenticate',
                jwt : '{{ jwt }}'
            }));
        }
        
        conn.onmessage = function(e) {
            var mseg = JSON.parse(e.data);

            if (mseg.type == 'stroke') {
                ctx.beginPath();
                ctx.moveTo(mseg.x1, mseg.y1);
                ctx.lineTo(mseg.x2, mseg.y2);
                ctx.strokeStyle = mseg.color;
                ctx.stroke();
            } else if (mseg.type == 'image') {
                var image = $("<img src=" + mseg.img + "></img>");
                ctx.drawImage(image[0], mseg.x, mseg.y);
            }
        }

        function onMouseDown(evt) {
        	switch (evt.button) {
            case LEFT_MOUSE:
                leftMouseDown = true;
                break;
            case RIGHT_MOUSE:
                rightMouseDown = true;
                break;
            }
        }

        function onMouseUp(evt) {
        	switch (evt.button) {
            case LEFT_MOUSE:
                leftMouseDown = false;
                break;
            case RIGHT_MOUSE:
                rightMouseDown = false;
                break;
            }
        }

        function onMouseLeave() {
            leftMouseDown = false;
            rightMouseDown = false;
        }

        function handleStart(evt) {
            evt.preventDefault();
            onMouseDown(evt);
            lastX = evt.offsetX;
            lastY = evt.offsetY;
        }

        function handleMove(evt) {
            if (leftMouseDown) {
                evt.preventDefault();
                
                ctx.beginPath();
                ctx.moveTo(lastX, lastY);
                ctx.lineTo(evt.offsetX, evt.offsetY);
                ctx.strokeStyle = getColor();
                ctx.stroke();

                conn.send(JSON.stringify({
                    type : 'stroke',
                    color : getColor(),
                    x1 : lastX,
                    y1 : lastY,
                    x2 : evt.offsetX,
                    y2 : evt.offsetY
                }));
                
                lastX = evt.offsetX;
                lastY = evt.offsetY;
            }
        }

        function handleEnd(evt) {
            evt.preventDefault();
            onMouseUp(evt);
        }

        function setColor() {
            conn.send(JSON.stringify({
                type : 'set color',
                color : $('#color-value').val()
            }));
        }
        
        function getColor() {
        	return $('#color-value').val();
        }

        function imageMouseDown(evt) {
        	evt.preventDefault();

        	onMouseDown(evt);

        	imageLastX = evt.clientX;
        	imageLastY = evt.clientY;
        }

        function imageMouseMove(evt) {
            if (leftMouseDown) {
            	evt.preventDefault();

            	var dX = evt.clientX - imageLastX,
            	    dY = evt.clientY - imageLastY;
            	imageLastX = evt.clientX;
            	imageLastY = evt.clientY;

        	    var target = $(evt.currentTarget);
        	    target.css('top', parseInt(target.css('top')) + dY);
        	    target.css('left', parseInt(target.css('left')) + dX); 
            }
        }

        function imageMouseUp(evt) {
            evt.preventDefault();
            onMouseUp(evt);
        }

        function openFile(evt) {
            var file = evt.target.files[0], div = $("<div></div>");

            var fr = new FileReader();
            fr.onload = function () {
                var i = $("<img src=" + fr.result + "></img>");
                div.append(i);

                var button = $("<button>Place</button>");
                button.click(function (evt) {
                    imageOff = i.offset();
                    canvasOff = canvas.offset();

                    var x = imageOff.left - canvasOff.left, y = imageOff.top - canvasOff.top;
                    ctx.drawImage(i[0], x, y);
                    div.remove();

                    conn.send(JSON.stringify({
                        type : 'image',
                        img : fr.result,
                        x : x,
                        y : y
                    }));
                });
                div.append(button);
                
                div.css({
                    position : 'absolute',
                    top : canvas.position().top,
                    left : canvas.position().left
                });
                $("#editable").append(div);

                div.mousedown(imageMouseDown);
                div.mousemove(imageMouseMove);
                div.mouseup(imageMouseUp);
                div.mouseleave(onMouseLeave);
            }
            if (file.type.split('/')[0] == 'image') {
            	fr.readAsDataURL(file);
            } else {
            	alert("Invalid file type!");
            }
            
            evt.target.value = null;
        }

        canvas.mousedown(handleStart);
        canvas.mouseup(handleEnd);
        canvas.mousemove(handleMove);
        canvas.mouseleave(onMouseLeave);
        $('#image-upload-button').change(openFile);
        $('#color-value').change(setColor);
        $('#color-preview').click(function () {
        	$('#color-picker')[0].jscolor.show();
        });
        console.log("Added Event Listeners");
    </script>
{% endblock %}
